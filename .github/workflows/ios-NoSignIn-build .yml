name: Build iOS Simulator App (Definitive Final)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-for-simulator:
    runs-on: macos-14

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Select latest stable Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'

    - name: Get Project/Workspace and Scheme
      id: project_info
      run: |
        # IMPROVED: Prefer .xcworkspace if it exists, as it's common with CocoaPods/SPM
        if [ -d "*.xcworkspace" ]; then
          WORKSPACE_FILE=$(find . -name "*.xcworkspace" -maxdepth 1)
          PROJECT_OR_WORKSPACE_FLAG="-workspace"
          PROJECT_OR_WORKSPACE_NAME=$(basename "$WORKSPACE_FILE")
        else
          PROJECT_FILE=$(find . -name "*.xcodeproj" -maxdepth 1)
          PROJECT_OR_WORKSPACE_FLAG="-project"
          PROJECT_OR_WORKSPACE_NAME=$(basename "$PROJECT_FILE")
        fi

        if [ -z "$PROJECT_OR_WORKSPACE_NAME" ]; then
          echo "Error: No .xcodeproj or .xcworkspace file found."
          exit 1
        fi
        
        echo "PROJECT_OR_WORKSPACE_FLAG=${PROJECT_OR_WORKSPACE_FLAG}" >> $GITHUB_OUTPUT
        echo "PROJECT_OR_WORKSPACE_NAME=${PROJECT_OR_WORKSPACE_NAME}" >> $GITHUB_OUTPUT

        SCHEME=$(xcodebuild -list $PROJECT_OR_WORKSPACE_FLAG "$PROJECT_OR_WORKSPACE_NAME" | awk '/Schemes:/,/Build Configurations:/' | grep -v -E '(Schemes:|Pods|Tests|Build Configurations:)' | head -n 1 | xargs)
        if [ -z "$SCHEME" ]; then
          echo "Error: Could not automatically determine a buildable scheme."
          exit 1
        fi
        echo "SCHEME_NAME=${SCHEME}" >> $GITHUB_OUTPUT

    - name: Build and Diagnose
      id: build
      run: |
        # THE DEFINITIVE FIX:
        # 1. We force ARCHS to arm64 (for Apple Silicon Simulators).
        # 2. We explicitly set EXCLUDED_ARCHS to nothing, overriding any bad project settings.
        xcodebuild clean build \
          ${{ steps.project_info.outputs.PROJECT_OR_WORKSPACE_FLAG }} "${{ steps.project_info.outputs.PROJECT_OR_WORKSPACE_NAME }}" \
          -scheme "${{ steps.project_info.outputs.SCHEME_NAME }}" \
          -sdk iphonesimulator \
          -derivedDataPath "build/DerivedData" \
          ARCHS=arm64 \
          EXCLUDED_ARCHS="" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO

        # --- DIAGNOSTIC STEP ---
        # This will tell us the true architecture of the file that was built.
        APP_PATH="build/DerivedData/Build/Products/Debug-iphonesimulator/${{ steps.project_info.outputs.SCHEME_NAME }}.app"
        echo "--- Verifying Architecture ---"
        file "${APP_PATH}/${{ steps.project_info.outputs.SCHEME_NAME }}"
        echo "--------------------------"
        echo "APP_PATH=${APP_PATH}" >> $GITHUB_OUTPUT


    - name: Compress Simulator App
      run: |
        APP_PATH="${{ steps.build.outputs.APP_PATH }}"
        ZIP_PATH="${{ steps.project_info.outputs.SCHEME_NAME }}.zip"
        echo "Compressing $APP_PATH to $ZIP_PATH"
        ditto -c -k --sequesterRsrc --keepParent "$APP_PATH" "$ZIP_PATH"

    - name: Upload Simulator Build (.zip)
      uses: actions/upload-artifact@v4
      with:
        name: simulator-build-app-zip
        path: ${{ steps.project_info.outputs.SCHEME_NAME }}.zip
        retention-days: 5
