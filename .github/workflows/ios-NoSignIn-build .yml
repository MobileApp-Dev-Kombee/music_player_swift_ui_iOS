name: Repair and Build iOS Project

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
        clean: true
    
    - name: Diagnose Project File
      run: |
        echo "=== Diagnosing Project File ==="
        
        PROJECT_FILE="MusicPlayerApp.xcodeproj"
        PBXPROJ_FILE="$PROJECT_FILE/project.pbxproj"
        
        if [ ! -d "$PROJECT_FILE" ]; then
          echo "‚ùå Project directory missing!"
          ls -la
          exit 1
        fi
        
        if [ ! -f "$PBXPROJ_FILE" ]; then
          echo "‚ùå project.pbxproj file missing!"
          ls -la "$PROJECT_FILE/"
          exit 1
        fi
        
        echo "üìÅ Project directory contents:"
        ls -la "$PROJECT_FILE/"
        
        echo "üìÑ project.pbxproj file info:"
        ls -la "$PBXPROJ_FILE"
        
        FILE_SIZE=$(stat -f%z "$PBXPROJ_FILE" 2>/dev/null || stat -c%s "$PBXPROJ_FILE" 2>/dev/null)
        echo "File size: $FILE_SIZE bytes"
        
        if [ "$FILE_SIZE" -lt 100 ]; then
          echo "‚ùå project.pbxproj is too small (likely corrupted)"
          echo "File contents:"
          cat "$PBXPROJ_FILE"
          exit 1
        fi
        
        echo "üîç First 10 lines of project.pbxproj:"
        head -10 "$PBXPROJ_FILE"
        
        echo "üîç Last 10 lines of project.pbxproj:"
        tail -10 "$PBXPROJ_FILE"
        
        # Check for common corruption patterns
        if grep -q "<<<<<<< HEAD" "$PBXPROJ_FILE"; then
          echo "‚ùå Found Git merge conflict markers!"
          grep -n "<<<<<<< HEAD\|=======\|>>>>>>> " "$PBXPROJ_FILE"
          exit 1
        fi
        
        # Check for missing or corrupted root object
        if ! grep -q "rootObject" "$PBXPROJ_FILE"; then
          echo "‚ùå Missing rootObject in project file!"
          exit 1
        fi
        
        echo "‚úÖ Basic file structure looks intact"
    
    - name: Attempt Project File Repair
      run: |
        echo "=== Attempting Project File Repair ==="
        
        PROJECT_FILE="MusicPlayerApp.xcodeproj"
        PBXPROJ_FILE="$PROJECT_FILE/project.pbxproj"
        BACKUP_FILE="$PBXPROJ_FILE.backup"
        
        # Create backup
        cp "$PBXPROJ_FILE" "$BACKUP_FILE"
        echo "‚úÖ Created backup: $BACKUP_FILE"
        
        # Try to fix common issues
        echo "üîß Attempting to fix project file..."
        
        # Remove any null characters
        tr -d '\000' < "$BACKUP_FILE" > "$PBXPROJ_FILE.tmp"
        mv "$PBXPROJ_FILE.tmp" "$PBXPROJ_FILE"
        
        # Ensure proper line endings
        dos2unix "$PBXPROJ_FILE" 2>/dev/null || sed -i '' 's/\r$//' "$PBXPROJ_FILE" 2>/dev/null || true
        
        # Try to validate the plist format
        if command -v plutil >/dev/null 2>&1; then
          echo "üîç Validating plist format..."
          if plutil -lint "$PBXPROJ_FILE" >/dev/null 2>&1; then
            echo "‚úÖ Project file format is valid"
          else
            echo "‚ùå Project file format is invalid"
            echo "Attempting to restore from backup and continue..."
            cp "$BACKUP_FILE" "$PBXPROJ_FILE"
          fi
        fi
        
        echo "üîß Repair attempt completed"
    
    - name: Setup Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        xcodebuild -version
    
    - name: Test Project Access After Repair
      run: |
        echo "=== Testing Project Access ==="
        
        PROJECT_FILE="MusicPlayerApp.xcodeproj"
        
        # Try to read the project
        echo "üß™ Testing project read access..."
        if xcodebuild -project "$PROJECT_FILE" -list -quiet 2>/dev/null; then
          echo "‚úÖ Project can be read successfully!"
        else
          echo "‚ùå Project still cannot be read. Detailed error:"
          xcodebuild -project "$PROJECT_FILE" -list
          echo ""
          echo "=== Attempting Alternative Approaches ==="
          
          # Check if we can extract any scheme information
          if grep -q "name.*= [A-Za-z]" "$PROJECT_FILE/project.pbxproj"; then
            echo "üìã Found potential scheme names in project file:"
            grep "name.*= [A-Za-z]" "$PROJECT_FILE/project.pbxproj" | head -5
          fi
          
          exit 1
        fi
    
    - name: Extract Project Information
      id: project_info
      run: |
        echo "=== Extracting Project Information ==="
        
        PROJECT_FILE="MusicPlayerApp.xcodeproj"
        
        # Get the scheme name
        SCHEME_NAME=$(basename "$PROJECT_FILE" .xcodeproj)
        echo "PROJECT_NAME=$SCHEME_NAME" >> $GITHUB_ENV
        echo "üéØ Using scheme: $SCHEME_NAME"
        
        # List all available schemes
        echo "üìã Available schemes:"
        xcodebuild -project "$PROJECT_FILE" -list
    
    - name: Build for iOS Simulator
      run: |
        echo "üî® Building for iOS Simulator..."
        
        PROJECT_FILE="MusicPlayerApp.xcodeproj"
        
        xcodebuild clean build \
          -project "$PROJECT_FILE" \
          -scheme "$PROJECT_NAME" \
          -configuration Debug \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
          -sdk iphonesimulator \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -quiet
        
        echo "‚úÖ Build completed successfully!"
    
    - name: Create Build Archive
      continue-on-error: true
      run: |
        echo "üì¶ Creating build archive..."
        
        PROJECT_FILE="MusicPlayerApp.xcodeproj"
        mkdir -p build
        
        xcodebuild archive \
          -project "$PROJECT_FILE" \
          -scheme "$PROJECT_NAME" \
          -configuration Release \
          -archivePath "build/$PROJECT_NAME.xcarchive" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -quiet
        
        if [ -d "build/$PROJECT_NAME.xcarchive" ]; then
          echo "‚úÖ Archive created successfully"
        fi
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: project-diagnostics-and-build
        path: |
          MusicPlayerApp.xcodeproj/project.pbxproj.backup
          build/
          *.log
        retention-days: 7
    
    - name: Project Health Report
      if: always()
      run: |
        echo "=== Project Health Report ==="
        echo "Project: MusicPlayerApp.xcodeproj"
        echo "Status: $([ $? -eq 0 ] && echo "‚úÖ Healthy" || echo "‚ùå Issues detected")"
        echo "Timestamp: $(date)"
        
        PROJECT_FILE="MusicPlayerApp.xcodeproj/project.pbxproj"
        if [ -f "$PROJECT_FILE" ]; then
          FILE_SIZE=$(stat -f%z "$PROJECT_FILE" 2>/dev/null || stat -c%s "$PROJECT_FILE" 2>/dev/null)
          echo "Project file size: $FILE_SIZE bytes"
        fi
