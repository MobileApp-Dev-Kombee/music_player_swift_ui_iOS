name: Universal iOS Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true
        fetch-depth: 0
        clean: true
    
    - name: Setup Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer
        xcodebuild -version
    
    - name: Install CocoaPods and Dependencies
      run: |
        # Always install CocoaPods (it's lightweight if not needed)
        sudo gem install cocoapods
        
        if [ -f "Podfile" ]; then
          echo "üì¶ Podfile found - installing CocoaPods dependencies"
          pod install --repo-update
          echo "‚úÖ CocoaPods installation complete"
        else
          echo "‚ÑπÔ∏è  No Podfile found - skipping CocoaPods"
        fi
    
    - name: Detect Project Structure
      id: detect
      run: |
        echo "=== Detecting Project Structure ==="
        
        # After pod install, check what we have
        WORKSPACE_FILE=""
        PROJECT_FILE=""
        
        # Look for workspace created by CocoaPods
        if [ -f "Podfile" ] && [ -d "*.xcworkspace" ]; then
          WORKSPACE_FILE=$(find . -maxdepth 1 -name "*.xcworkspace" | head -n 1)
        fi
        
        # Look for the main project file
        PROJECT_FILE=$(find . -maxdepth 1 -name "*.xcodeproj" | head -n 1)
        
        # Determine what to use
        if [ -n "$WORKSPACE_FILE" ] && [ -d "$WORKSPACE_FILE" ]; then
          echo "‚úÖ Using CocoaPods workspace: $WORKSPACE_FILE"
          echo "BUILD_FILE=$WORKSPACE_FILE" >> $GITHUB_ENV
          echo "BUILD_TYPE=workspace" >> $GITHUB_ENV
          SCHEME_NAME=$(basename "$WORKSPACE_FILE" .xcworkspace)
        elif [ -n "$PROJECT_FILE" ] && [ -d "$PROJECT_FILE" ]; then
          echo "‚úÖ Using Xcode project: $PROJECT_FILE"
          echo "BUILD_FILE=$PROJECT_FILE" >> $GITHUB_ENV
          echo "BUILD_TYPE=project" >> $GITHUB_ENV
          SCHEME_NAME=$(basename "$PROJECT_FILE" .xcodeproj)
        else
          echo "‚ùå No valid Xcode project or workspace found!"
          ls -la
          exit 1
        fi
        
        echo "PROJECT_NAME=$SCHEME_NAME" >> $GITHUB_ENV
        echo "üéØ Target scheme: $SCHEME_NAME"
        echo "üîß Build type: $([ "$BUILD_TYPE" = "workspace" ] && echo "workspace" || echo "project")"
    
    - name: List Available Schemes
      run: |
        echo "=== Available Schemes ==="
        if [ "$BUILD_TYPE" = "workspace" ]; then
          xcodebuild -workspace "$BUILD_FILE" -list
        else
          xcodebuild -project "$BUILD_FILE" -list
        fi
    
    - name: Verify Build Configuration
      run: |
        echo "=== Verifying Build Configuration ==="
        echo "Build file: $BUILD_FILE"
        echo "Build type: $BUILD_TYPE"
        echo "Scheme: $PROJECT_NAME"
        
        # Test that we can access the build settings
        if [ "$BUILD_TYPE" = "workspace" ]; then
          xcodebuild -workspace "$BUILD_FILE" -scheme "$PROJECT_NAME" -showBuildSettings -quiet | head -5
        else
          xcodebuild -project "$BUILD_FILE" -scheme "$PROJECT_NAME" -showBuildSettings -quiet | head -5
        fi
        
        echo "‚úÖ Build configuration verified"
    
    - name: Clean Build Directory
      run: |
        echo "üßπ Cleaning build directory..."
        if [ "$BUILD_TYPE" = "workspace" ]; then
          xcodebuild -workspace "$BUILD_FILE" -scheme "$PROJECT_NAME" clean
        else
          xcodebuild -project "$BUILD_FILE" -scheme "$PROJECT_NAME" clean
        fi
    
    - name: Build for iOS Simulator
      run: |
        echo "üî® Building for iOS Simulator..."
        
        if [ "$BUILD_TYPE" = "workspace" ]; then
          BUILD_ARGS="-workspace $BUILD_FILE"
        else
          BUILD_ARGS="-project $BUILD_FILE"
        fi
        
        xcodebuild build \
          $BUILD_ARGS \
          -scheme "$PROJECT_NAME" \
          -configuration Debug \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
          -sdk iphonesimulator \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -quiet \
          | xcpretty || echo "xcpretty not available, showing raw output"
        
        echo "‚úÖ Simulator build completed"
    
    - name: Build for iOS Device (Release)
      continue-on-error: true
      run: |
        echo "üì± Building for iOS Device (Release)..."
        
        if [ "$BUILD_TYPE" = "workspace" ]; then
          BUILD_ARGS="-workspace $BUILD_FILE"
        else
          BUILD_ARGS="-project $BUILD_FILE"
        fi
        
        mkdir -p build
        
        xcodebuild archive \
          $BUILD_ARGS \
          -scheme "$PROJECT_NAME" \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          -archivePath "build/$PROJECT_NAME.xcarchive" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -quiet \
          | xcpretty || echo "xcpretty not available, showing raw output"
        
        if [ -d "build/$PROJECT_NAME.xcarchive" ]; then
          echo "‚úÖ Device archive created successfully"
        else
          echo "‚ö†Ô∏è  Device archive creation failed (this is optional)"
        fi
    
    - name: Run Tests (if available)
      continue-on-error: true
      run: |
        echo "üß™ Running tests..."
        
        if [ "$BUILD_TYPE" = "workspace" ]; then
          BUILD_ARGS="-workspace $BUILD_FILE"
        else
          BUILD_ARGS="-project $BUILD_FILE"
        fi
        
        # Check if tests exist first
        if xcodebuild -list $BUILD_ARGS | grep -q "Test"; then
          xcodebuild test \
            $BUILD_ARGS \
            -scheme "$PROJECT_NAME" \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
            -quiet \
            | xcpretty || echo "Tests completed"
          echo "‚úÖ Tests completed"
        else
          echo "‚ÑπÔ∏è  No tests found, skipping test execution"
        fi
    
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-build-artifacts-${{ github.run_number }}
        path: |
          build/
          *.log
          ~/Library/Developer/Xcode/DerivedData/**/Logs/
        retention-days: 7
    
    - name: Build Summary
      if: always()
      run: |
        echo "=== Build Summary ==="
        echo "Project: $PROJECT_NAME"
        echo "Build Type: $BUILD_TYPE"
        echo "Build File: $BUILD_FILE"
        echo "CocoaPods: $([ -f "Podfile" ] && echo "Yes" || echo "No")"
        echo "Timestamp: $(date)"
        
        if [ -d "build" ]; then
          echo "üì¶ Artifacts created:"
          ls -la build/
        fi
