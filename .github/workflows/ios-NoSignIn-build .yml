name: Universal iOS Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Setup Xcode 16.2
      uses: maximbaz/setup-xcode@v4
      with:
        xcode-version: 16.2

    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Verify Project File Integrity
      run: |
        echo "üîç Verifying Xcode project file integrity..."

        PROJECT_NAME=$(find . -maxdepth 1 -name "*.xcodeproj" -type d | head -n 1 | sed 's/\.xcodeproj$//; s/^\.\///')
        if [ -z "$PROJECT_NAME" ]; then
          echo "‚ùå No .xcodeproj directory found in repository root!"
          ls -la *.xcodeproj *.xcworkspace 2>/dev/null || echo "No project or workspace found."
          exit 1
        fi

        PBXPROJ_FILE="$PROJECT_NAME.xcodeproj/project.pbxproj"
        if [ ! -f "$PBXPROJ_FILE" ]; then
          echo "‚ùå Critical: $PBXPROJ_FILE is missing or not downloaded!"
          exit 1
        fi

        if grep -q "<<<<<<" "$PBXPROJ_FILE"; then
          echo "‚ùå CRITICAL: Merge conflict detected in $PBXPROJ_FILE!"
          grep -n "<<<<<<" "$PBXPROJ_FILE" || true
          exit 1
        fi

        echo "‚úÖ $PBXPROJ_FILE is valid and free of merge conflicts."

    - name: Install CocoaPods and Dependencies
      run: |
        if [ -f "Podfile" ]; then
          echo "üì¶ Installing CocoaPods dependencies..."
          gem install cocoapods --silent || gem install cocoapods
          pod install --repo-update
          echo "‚úÖ Pods installed successfully."
        else
          echo "‚ÑπÔ∏è No Podfile found. Skipping CocoaPods installation."
        fi

    - name: Detect Project Structure
      id: detect
      run: |
        echo "=== Detecting Project Structure ==="

        WORKSPACE_FILE=$(find . -maxdepth 1 -name "*.xcworkspace" -type d | head -n 1)
        PROJECT_FILE=$(find . -maxdepth 1 -name "*.xcodeproj" -type d | head -n 1)

        if [ -n "$WORKSPACE_FILE" ] && [ -f "Podfile" ]; then
          echo "‚úÖ Using workspace: $WORKSPACE_FILE"
          echo "BUILD_FILE=$WORKSPACE_FILE" >> $GITHUB_ENV
          echo "BUILD_TYPE=workspace" >> $GITHUB_ENV
          SCHEME_NAME=$(basename "$WORKSPACE_FILE" .xcworkspace)
        elif [ -n "$PROJECT_FILE" ]; then
          echo "‚úÖ Using project: $PROJECT_FILE"
          echo "BUILD_FILE=$PROJECT_FILE" >> $GITHUB_ENV
          echo "BUILD_TYPE=project" >> $GITHUB_ENV
          SCHEME_NAME=$(basename "$PROJECT_FILE" .xcodeproj)
        else
          echo "‚ùå No valid Xcode project found!"
          ls -la
          exit 1
        fi

        echo "PROJECT_NAME=$SCHEME_NAME" >> $GITHUB_ENV
        echo "üéØ Scheme: $SCHEME_NAME"

    - name: List Available Schemes
      run: |
        echo "=== Available Schemes ==="
        if [ "$BUILD_TYPE" = "workspace" ]; then
          xcodebuild -workspace "$BUILD_FILE" -list
        else
          xcodebuild -project "$BUILD_FILE" -list
        fi

    - name: Build for iOS Simulator
      run: |
        echo "üî® Building for iOS Simulator..."
        mkdir -p build

        BUILD_ARGS=()
        [ "$BUILD_TYPE" = "workspace" ] && BUILD_ARGS+=(-workspace "$BUILD_FILE")
        [ "$BUILD_TYPE" = "project" ] && BUILD_ARGS+=(-project "$BUILD_FILE")

        xcodebuild build \
          "${BUILD_ARGS[@]}" \
          -scheme "$PROJECT_NAME" \
          -configuration Debug \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
          -sdk iphonesimulator \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty || echo "Build completed (with possible warnings)"

    - name: Archive for iOS Device (Release)
      continue-on-error: true
      run: |
        echo "üì± Archiving for iOS Device..."
        mkdir -p build

        xcodebuild archive \
          "${BUILD_ARGS[@]}" \
          -scheme "$PROJECT_NAME" \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          -archivePath "build/$PROJECT_NAME.xcarchive" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty || echo "Archive failed (optional)"

        [ -d "build/$PROJECT_NAME.xcarchive" ] && echo "‚úÖ Archive created"

    - name: Run Tests
      continue-on-error: true
      run: |
        echo "üß™ Running tests..."
        xcodebuild test \
          "${BUILD_ARGS[@]}" \
          -scheme "$PROJECT_NAME" \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
          | xcpretty || echo "Tests completed"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-build-artifacts-${{ github.run_number }}
        path: |
          build/
          ~/Library/Developer/Xcode/DerivedData/**/Logs/
        retention-days: 7

    - name: Build Summary
      if: always()
      run: |
        echo "=== üìù Build Summary ==="
        xcodebuild -version
        echo "Project: $PROJECT_NAME"
        echo "Xcode version supports format 77 ‚úÖ"
        [ -d "build" ] && find build -ls
