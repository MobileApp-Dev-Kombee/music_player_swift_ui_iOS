name: Universal iOS Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history needed for LFS and analysis

    - name: Verify Project File Integrity
      run: |
        echo "üîç Verifying Xcode project file integrity..."

        PROJECT_NAME=$(find . -maxdepth 1 -name "*.xcodeproj" -type d | head -n 1 | sed 's/\.xcodeproj$//; s/^\.\///')
        if [ -z "$PROJECT_NAME" ]; then
          echo "‚ùå No .xcodeproj directory found in repository root!"
          ls -la *.xcodeproj *.xcworkspace 2>/dev/null || echo "No project or workspace found."
          exit 1
        fi

        PBXPROJ_FILE="$PROJECT_NAME.xcodeproj/project.pbxproj"
        if [ ! -f "$PBXPROJ_FILE" ]; then
          echo "‚ùå Critical: $PBXPROJ_FILE is missing or not downloaded!"
          exit 1
        fi

        if grep -q ">>>>>" "$PBXPROJ_FILE"; then
          echo "‚ùå CRITICAL: Merge conflict detected in $PBXPROJ_FILE!"
          grep -n "<<<<<<" "$PBXPROJ_FILE" || true
          exit 1
        fi

        if ! head -n 10 "$PBXPROJ_FILE" | grep -q "archiveVersion"; then
          echo "‚ùå CRITICAL: project.pbxproj appears corrupted (missing archiveVersion)."
          head -n 20 "$PBXPROJ_FILE"
          exit 1
        fi

        echo "‚úÖ $PBXPROJ_FILE is valid and free of merge conflicts."

    - name: Setup Xcode
      run: |
        # Change this version if needed
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        echo "üõ†Ô∏è Xcode version:"
        xcodebuild -version

    - name: Install CocoaPods and Dependencies
      run: |
        if [ -f "Podfile" ]; then
          echo "üì¶ Installing CocoaPods dependencies..."
          gem install cocoapods --silent || gem install cocoapods
          pod install --repo-update
          echo "‚úÖ Pods installed successfully."
        else
          echo "‚ÑπÔ∏è No Podfile found. Skipping CocoaPods installation."
        fi

    - name: Detect Project Structure
      id: detect
      run: |
        echo "=== Detecting Project Structure ==="

        # Find workspace and project (only in root)
        WORKSPACE_FILE=$(find . -maxdepth 1 -name "*.xcworkspace" -type d | head -n 1)
        PROJECT_FILE=$(find . -maxdepth 1 -name "*.xcodeproj" -type d | head -n 1)

        if [ -n "$WORKSPACE_FILE" ]; then
          echo "‚úÖ Using workspace: $WORKSPACE_FILE"
          echo "BUILD_FILE=$WORKSPACE_FILE" >> $GITHUB_ENV
          echo "BUILD_TYPE=workspace" >> $GITHUB_ENV
          SCHEME_NAME=$(basename "$WORKSPACE_FILE" .xcworkspace)
        elif [ -n "$PROJECT_FILE" ]; then
          echo "‚úÖ Using project: $PROJECT_FILE"
          echo "BUILD_FILE=$PROJECT_FILE" >> $GITHUB_ENV
          echo "BUILD_TYPE=project" >> $GITHUB_ENV
          SCHEME_NAME=$(basename "$PROJECT_FILE" .xcodeproj)
        else
          echo "‚ùå No valid Xcode project (.xcodeproj) or workspace (.xcworkspace) found!"
          ls -la *.xcodeproj *.xcworkspace 2>/dev/null || echo "No Xcode containers found."
          exit 1
        fi

        echo "PROJECT_NAME=$SCHEME_NAME" >> $GITHUB_ENV
        echo "üéØ Detected scheme name: $SCHEME_NAME"
        echo "üîß Build type: $BUILD_TYPE"
    
    - name: List Available Schemes
      run: |
        echo "=== Available Schemes ==="
        if [ "$BUILD_TYPE" = "workspace" ]; then
          xcodebuild -workspace "$BUILD_FILE" -list -json
        else
          xcodebuild -project "$BUILD_FILE" -list -json
        fi || {
          echo "‚ùå Failed to list schemes. Project may be corrupted."
          exit 1
        }

    - name: Verify Build Configuration
      run: |
        echo "=== Verifying Build Settings ==="
        if [ "$BUILD_TYPE" = "workspace" ]; then
          xcodebuild -workspace "$BUILD_FILE" -scheme "$PROJECT_NAME" -showBuildSettings -quiet | head -5
        else
          xcodebuild -project "$BUILD_FILE" -scheme "$PROJECT_NAME" -showBuildSettings -quiet | head -5
        fi
        echo "‚úÖ Build configuration accessible."

    - name: Clean Build Directory
      run: |
        echo "üßπ Cleaning previous builds..."
        if [ "$BUILD_TYPE" = "workspace" ]; then
          xcodebuild -workspace "$BUILD_FILE" -scheme "$PROJECT_NAME" clean -quiet
        else
          xcodebuild -project "$BUILD_FILE" -scheme "$PROJECT_NAME" clean -quiet
        fi

    - name: Build for iOS Simulator (Debug)
      run: |
        echo "üî® Building for iOS Simulator..."
        mkdir -p build

        BUILD_ARGS=()
        [ "$BUILD_TYPE" = "workspace" ] && BUILD_ARGS+=(-workspace "$BUILD_FILE")
        [ "$BUILD_TYPE" = "project" ] && BUILD_ARGS+=(-project "$BUILD_FILE")

        xcodebuild build \
          "${BUILD_ARGS[@]}" \
          -scheme "$PROJECT_NAME" \
          -configuration Debug \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
          -sdk iphonesimulator \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty || echo "‚ö†Ô∏è xcpretty not installed ‚Äì showing raw output above"

        echo "‚úÖ Simulator build completed."

    - name: Archive for iOS Device (Release)
      continue-on-error: true
      run: |
        echo "üì± Archiving for iOS Device (Release)..."
        mkdir -p build

        BUILD_ARGS=()
        [ "$BUILD_TYPE" = "workspace" ] && BUILD_ARGS+=(-workspace "$BUILD_FILE")
        [ "$BUILD_TYPE" = "project" ] && BUILD_ARGS+=(-project "$BUILD_FILE")

        xcodebuild archive \
          "${BUILD_ARGS[@]}" \
          -scheme "$PROJECT_NAME" \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          -archivePath "build/$PROJECT_NAME.xcarchive" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty || echo "Archive step failed or xcpretty missing."

        if [ -d "build/$PROJECT_NAME.xcarchive" ]; then
          echo "‚úÖ Archive created at build/$PROJECT_NAME.xcarchive"
        else
          echo "‚ö†Ô∏è Archive creation failed (optional step)"
        fi

    - name: Run Tests (if available)
      continue-on-error: true
      run: |
        echo "üß™ Checking for test schemes..."
        if [ "$BUILD_TYPE" = "workspace" ]; then
          if xcodebuild -workspace "$BUILD_FILE" -scheme "$PROJECT_NAME" test -dry-run > /dev/null 2>&1; then
            echo "‚úÖ Tests found. Running..."
            xcodebuild test \
              -workspace "$BUILD_FILE" \
              -scheme "$PROJECT_NAME" \
              -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
              | xcpretty || echo "Tests executed (with possible failures)"
          else
            echo "‚ÑπÔ∏è No tests configured for scheme '$PROJECT_NAME'"
          fi
        else
          if xcodebuild -project "$BUILD_FILE" -scheme "$PROJECT_NAME" test -dry-run > /dev/null 2>&1; then
            echo "‚úÖ Tests found. Running..."
            xcodebuild test \
              -project "$BUILD_FILE" \
              -scheme "$PROJECT_NAME" \
              -destination 'platform=iOS Simulator,name=iPhone 16,OS=latest' \
              | xcpretty || echo "Tests executed"
          else
            echo "‚ÑπÔ∏è No tests configured for scheme '$PROJECT_NAME'"
          fi
        fi

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ios-build-artifacts-${{ github.run_number }}
        path: |
          build/
          *.log
          ~/Library/Developer/Xcode/DerivedData/**/Logs/
        retention-days: 7

    - name: Build Summary
      if: always()
      run: |
        echo "=== üìù Build Summary ==="
        echo "Project: $PROJECT_NAME"
        echo "Build Type: $BUILD_TYPE"
        echo "Build File: $BUILD_FILE"
        echo "CocoaPods Used: $([ -f "Podfile" ] && echo "Yes" || echo "No")"
        echo "Timestamp: $(date)"
        echo ""
        if [ -d "build" ]; then
          echo "üì¶ Generated Artifacts:"
          find build -type f -name "*.xcarchive" -o -name "*.ipa" | xargs ls -la
        else
          echo "üì¶ No build artifacts generated."
        fi
