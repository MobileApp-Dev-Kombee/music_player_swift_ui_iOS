name: Build iOS Project (Dynamic)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Select latest stable Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'

    - name: Get Project and Scheme Info
      id: project_info
      run: |
        PROJECT_FILE=$(find . -name "*.xcodeproj" -maxdepth 1)
        if [ -z "$PROJECT_FILE" ]; then
          echo "Error: No .xcodeproj file found in the root directory."
          exit 1
        fi
        echo "PROJECT_NAME=${PROJECT_FILE##*/}" >> $GITHUB_OUTPUT

        # This logic is fragile but works for simple projects.
        # Consider hardcoding the scheme name for more reliability.
        SCHEME=$(xcodebuild -list -project "$PROJECT_FILE" | grep -v -E '(Pods|Tests)' | awk 'NR==1{print $1}' | sed -n 's/^[[:space:]]*//;s/[[:space:]]*$//;p')
        if [ -z "$SCHEME" ]; then
          echo "Error: Could not automatically determine a buildable scheme."
          exit 1
        fi
        echo "SCHEME_NAME=${SCHEME}" >> $GITHUB_OUTPUT

    - name: Install Apple Certificate and Provisioning Profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create a temporary keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        
        # Import the certificate
        CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
        security list-keychain -d user -s "$KEYCHAIN_PATH"
        
        # Install the provisioning profile
        PROFILE_PATH=~/Library/MobileDevice/Provisioning\ Profiles
        mkdir -p "$PROFILE_PATH"
        PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode))
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode > "$PROFILE_PATH/$PROFILE_UUID.mobileprovision"
        echo "Installed profile $PROFILE_UUID"

    - name: Archive and Export IPA
      run: |
        PROJECT_NAME="${{ steps.project_info.outputs.PROJECT_NAME }}"
        SCHEME_NAME="${{ steps.project_info.outputs.SCHEME_NAME }}"
        ARCHIVE_PATH="build/archive.xcarchive"
        EXPORT_PATH="build/export"

        echo "ðŸ“¦ Archiving scheme '$SCHEME_NAME'..."
        xcodebuild archive \
          -project "$PROJECT_NAME" \
          -scheme "$SCHEME_NAME" \
          -sdk iphoneos \
          -archivePath "$ARCHIVE_PATH" \
          -destination 'generic/platform=iOS'
          
        echo "ðŸ“¤ Exporting IPA..."
        xcodebuild -exportArchive \
          -archivePath "$ARCHIVE_PATH" \
          -exportPath "$EXPORT_PATH" \
          -exportOptionsPlist "scripts/ExportOptions.plist"

    - name: Upload Installable IPA
      uses: actions/upload-artifact@v4
      with:
        name: installable-app-ipa
        path: build/export/*.ipa
        retention-days: 7
